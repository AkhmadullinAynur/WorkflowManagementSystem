@page "/"
@inject NavigationManager navigate
@inject Client clientName

@if (!_authorizationIsActive)
{
    <div class="col-md-6 offset-md-3">
        <table class="table table-responsive-md">
            <thead class="table-primary text-center">
                <tr>
                    <th><h2 class="font-weight-bolder">Authorization</h2></th>
                </tr>
            </thead>
        </table>
        <EditForm Model="clientName" OnValidSubmit="AuthorizationNow" class="table table-responsive-md">
            <DataAnnotationsValidator />
            <label>Имя пользователя:</label>
            <ValidationMessage For="()=>clientName.Name" />
            <InputText class="form-control" placeholder="Введите логин" @bind-Value="clientName.Name" />
            <label>Пароль:</label>
            <ValidationMessage For="()=>clientName.Password" />
            <InputText type="password" class="form-control" placeholder="Введите пароль" @bind-Value="clientName.Password" />
            <label></label>
            <table class="table table-responsive-md">
                <tfoot class="table-primary">
                    @if (_isNotComplete)
                    {
                        <tr>
                            <td class="alert-danger"><h2>Неверный логин или пароль!</h2></td>
                        </tr>
                    }
                    @if (_notActive)
                    {
                        <tr>
                            <td class="alert-warning"><h2>Ваш аккаунт проходит проверку на подлинность. Пожалуйста, повторите попытку позже.</h2></td>
                        </tr>
                    }
                    <tr>
                        <th>
                            <button class="btn btn-primary">Авторизоваться</button>
                            <button class="btn btn-primary" @onclick="()=>navigate.NavigateTo(inReg)">Регистрация нового пользователя</button>
                        </th>
                    </tr>
                </tfoot>
            </table>
        </EditForm>
    </div>
}
else
{
    if (_active)
    {
        @if (_profession == "Проектировщик")
        {
            <Planner/>
        }
        @if (_profession == "Инженер")
        {
            <Engineer/>
        }
        @if (_profession == "Кладовщик")
        {
            <Warehouseman/>
        }
    }
}


@code {
    Client client = new Client();

    string inReg = "/registration";

    private bool _authorizationIsActive;

    private bool _isNotComplete;
    private bool _adminMode;
    private bool _active;
    private bool _notActive;

    private static string _login;
    private static string _password;
    private static string _profession;

    private void AuthorizationNow()
    {
        var client = MongoDataBase.Authorization(clientName.Name, clientName.Password);
        if (clientName.Name == "Admin" && clientName.Password == "admin")
        {
            navigate.NavigateTo("/admin");
        }
        else
        if (client != null)
        {
            var user = MongoDataBase.FindUser(clientName.Name);
            foreach (var item in user)
            {
                _active = item.Active;
            }
            if (_active)
            {
                _login = clientName.Name;
                clientName.GetProfession();
                _profession = MongoDataBase.FindUserProfession(clientName.Name);
                _isNotComplete = false;
                _authorizationIsActive = !_authorizationIsActive;
            }
            else
            {
                _notActive = !_notActive;
            }
        }
        else
        {
            _isNotComplete = true;
        }
    }
    //private void AuthorizationNow()
    //{
    //    if (client.Name == "Admin" && client.Password == "admin")
    //    {
    //        navigate.NavigateTo("/admin");
    //    }
    //    else
    //    if (client.Name == MongoDataBase.FindUserName(client.Name) && client.Password == MongoDataBase.FindUserPassword(client.Password))
    //    {

    //        var user = MongoDataBase.FindUser(client.Name);
    //        foreach (var item in user)
    //        {
    //            _active = item.Active;
    //        }
    //        if (_active)
    //        {
    //            _login = client.Name;
    //            clientName.SaveName();
    //            _profession = MongoDataBase.FindUserProfession(client.Name);
    //            _isNotComplete = false;
    //            _authorizationIsActive = !_authorizationIsActive;
    //        }
    //        else
    //        {
    //            _notActive = !_notActive;
    //        }
    //    }
    //    else
    //    {
    //        _isNotComplete = true;
    //    }
    //}

    private void IsNotComplete()
    {
        _isNotComplete = true;
    }


}
