@page "/warehouseman"
@inject ProductService productService

<div class="row border border-dark modal-content">
    <table class="table table-responsive-md text-center">
        <THeadComponent Warehouseman="true"></THeadComponent>
        <tbody>
            <TemplateTable Items="productService.merchandises">
                <ItemTemplate Context="item">
                    <td class="border-right" style="margin-left" align="left">@item.Name</td>
                    <td class="border-right">@item.TypeProduct</td>
                    <td class="border-right">@item.Manufacturer</td>
                    <td class="border-right">@item.Article</td>
                    <td class="border-right">@item.Quantity</td>
                    <td>
                        <button @onclick="()=>DeleteProduct(item.Article)">Удалить</button>
                        <button @onclick="()=>EditProductActive(item.Article)">Изменить</button>
                    </td>
                </ItemTemplate>
            </TemplateTable>
        </tbody>
    </table>
    <table class="table table-responsive-md text-center">
        <THeadComponent WarehousemanPanel="true"></THeadComponent>
        <tbody class="table-primary">
            @if (_newAddActive)
            {
                <MessageComponent NewAddComponent="true"></MessageComponent>
            }
            @if (_editTypeActive)
            {
                <MessageComponent TypeEdit="true"></MessageComponent>
            }
            @if (_editProductActive)
            {
                <MessageComponent ProductEdit="true" ProductName="@_nameProduct" ProductArticle="@_article"></MessageComponent>
            }
            @if (_newAddComplete)
            {
                <MessageComponent AddComponentComplete="true"></MessageComponent>
            }
            @if (_newTypeComplete)
            {
                <MessageComponent NewTypeComplete="true"></MessageComponent>
            }
            @if (_editComplete)
            {
                <MessageComponent EditComplete="true"></MessageComponent>
            }
        </tbody>
        <tfoot class="table-primary">
            @if (!_buttonActive)
            {
                <tr>
                    <td align="left">
                        <button class="btn btn-primary" @onclick="NewAddActive">Добавить новый товар в базу данных</button>
                        <button class="btn btn-primary" @onclick="EditTypeActive">Добавить новую категорию товара</button>
                    </td>
                    <td colspan="5"></td>
                </tr>
            }
            @if (_newAddActive)
            {
                <tr>
                    <td><input class="form-control" placeholder="Введите название товара" @bind-value="_nameProduct" /></td>
                    <td>
                        <select class="form-control" @onchange="SelectionType">
                            <option class="text-center" value="-1>\">Выбрать категорию продукта"</option>
                            @foreach (var item in typeList)
                            {
                                <option>@item.TypeProduct</option>
                            }
                        </select>
                    </td>
                    <td><input class="form-control" placeholder="Введите производителя товара" @bind-value="_manufacturer" /></td>
                    <td><input type="number" class="form-control" placeholder="" @bind-value="_quantity" /></td>
                    <td>
                        <button class="btn btn-primary" @onclick="AddProduct">Добавить новый товар в базу данных</button>
                        <button class="btn btn-primary" @onclick="Cancel">Отмена</button>
                    </td>
                    <td></td>
                </tr>
            }
            @if (_editTypeActive)
            {
                <tr>
                    <td><input class="form-control" placeholder="Веедите название" @bind-value="_typeProduct" /></td>
                    <td align="left">
                        <button class="btn btn-primary" @onclick="AddTypeToDB">Добавить новый тип в базу данных</button>
                        <button class="btn btn-primary" @onclick="Cancel">Отмена</button>
                    </td>
                    <td colspan="4"></td>
                </tr>
            }
            @if (_editProductActive)
            {
                <tr>
                    <td><input class="form-control" placeholder="Введите название товара" @bind-value="_nameProduct" /></td>
                    <td>
                        <select class="form-control" @onchange="SelectionType">
                            <option class="text-center" value="-1>\">@_typeProduct</option>
                            @foreach (var item in typeList)
                            {
                                <option>@item.TypeProduct</option>
                            }
                        </select>
                    </td>
                    <td><input class="form-control" placeholder="Введите производителя товара" @bind-value="_manufacturer" /></td>
                    <td><input type="number" class="form-control" placeholder="" @bind-value="_quantity" /></td>
                    <td><button class="btn-primary" @onclick="MinusClick">-</button>  @_quantity  <button class="btn-primary" @onclick="PlusClick">+</button></td>
                    <td>
                        <button class="btn btn-primary" @onclick="ReplaceProduct">Внести изменения</button>
                        <button class="btn btn-primary" @onclick="Cancel">Отмена</button>
                    </td>
                </tr>
            }
        </tfoot>
    </table>
</div>

@code {
    List<Product> merchandises = new List<Product>();
    List<Product> typeList = MongoDataBase.GetTypeList();
    private string _nameProduct;
    private string _typeProduct;
    private string _manufacturer;
    private int _quantity;
    private int _article;
    private int _count;

    private bool _buttonActive;
    private bool _newAddActive;
    private bool _editTypeActive;
    private bool _editProductActive;
    private bool _newAddComplete;
    private bool _newTypeComplete;
    private bool _editComplete;

    private void NewAddActive()
    {
        MessageFalse();
        _newAddActive = !_newAddActive;
        _buttonActive = true;
    }
    private void EditTypeActive()
    {
        MessageFalse();
        _editTypeActive = !_editTypeActive;
        _buttonActive = true;
    }
    private void EditProductActive(int article)
    {
        merchandises = MongoDataBase.FindProduct(article);
        foreach (var item in merchandises)
        {
            _nameProduct = item.Name;
            _manufacturer = item.Manufacturer;
            _typeProduct = item.TypeProduct;
            _article = item.Article;
            _quantity = item.Quantity;
        }
        MessageFalse();
        _editProductActive = true;
        _buttonActive = true;
    }
    private void Cancel()
    {
        MessageFalse();
        Refresh();
        _buttonActive = false;
        _newAddActive = false;
        _editTypeActive = false;
        _editProductActive = false;
    }
    private void Refresh()
    {
        _nameProduct = string.Empty;
        _typeProduct = string.Empty;
        _manufacturer = string.Empty;
        _quantity = 0;

    }
    private void MessageFalse()
    {
        _newAddComplete = false;
        _newTypeComplete = false;
        _editComplete = false;
    }

    protected override void OnInitialized()
    {
        productService.merchandises = MongoDataBase.GetProductList();
        typeList = MongoDataBase.GetTypeList();
    }

    private void AddProduct()
    {
        merchandises = MongoDataBase.GetProductList();
        int newArticle = 1;
        int article = 1;
        foreach (var item in merchandises)
        {
            article = item.Article;
        }
        for (int i = 1000000; i <= article + 1; i++)
        {
            newArticle = i;
        }
        MongoDataBase.AddProductToDB(new Product(_nameProduct, _typeProduct, _manufacturer, newArticle, _quantity));
        OnInitialized();
        Refresh();
        Cancel();
        _newAddComplete = true;
    }
    private void AddTypeToDB()
    {
        MongoDataBase.AddTypeToDB(new Product(_typeProduct));
        OnInitialized();
        Refresh();
        Cancel();
        _newTypeComplete = true;
    }

    private void SelectionType(ChangeEventArgs args)
    {
        var newBuffTasks = typeList.Find(x => x.TypeProduct == args.Value.ToString());
        _typeProduct = newBuffTasks.TypeProduct;
        //merchandises.Add(new Merchandise(_typeProduct));
        OnInitialized();
    }
    private void DeleteProduct(int article)
    {
        MongoDataBase.DeleteProduct(article);
        OnInitialized();
        MessageFalse();
    }
    private void ReplaceProduct()
    {
        MongoDataBase.ReplaceProduct(_article, new Product(_nameProduct, _typeProduct, _manufacturer, _article, _quantity));
        OnInitialized();
        Refresh();
        Cancel();
        _editComplete = true;
    }

    private void MinusClick()
    {
        if (_quantity > 0)
        {
            _quantity--;
        }
    }
    private void PlusClick()
    {
        _quantity++;
    }

}